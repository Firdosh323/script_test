import boto3
import csv
import datetime

def get_account_ids():
    """Retrieves all the account IDs in the organization"""
    org_client = boto3.client('organizations')
    accounts = []
    try:
        response = org_client.list_accounts()
        for account in response['Accounts']:
            accounts.append(account['Id'])
    except Exception as e:
        print(f"Error listing accounts: {e}")
    return accounts

def get_bucket_details(account_id):
    """Fetches S3 bucket details for a given account"""
    session = boto3.Session(profile_name=None) # Adjust if using profiles
    s3_client = session.client('s3') # Default region in boto3 config
    buckets = []

    try:
        response = s3_client.list_buckets()
        num_buckets = len(response['Buckets'])
        print(f"Number of buckets for account {account_id}: {num_buckets}")
        
        regions = set()
        for bucket in response['Buckets']:
            try:
                print(f"Processing bucket: {bucket['Name']}")
                region = s3_client.get_bucket_location(Bucket=bucket['Name']).get('LocationConstraint', 'N/A')
                if region != 'N/A':
                    regions.add(region)
            except Exception as e:
                print(f"Error getting region for bucket {bucket['Name']}: {e}")
            
            try:
                tags = s3_client.get_bucket_tagging(Bucket=bucket['Name']).get('TagSet', [])
                tags_dict = {tag['Key']: tag['Value'] for tag in tags} # Create a tag dictionary
            except s3_client.exceptions.NoSuchTagSet:
                print(f"No tags found for bucket {bucket['Name']}")
                tags_dict = {}
            except Exception as e:
                print(f"Error getting tags for bucket {bucket['Name']}: {e}")
                tags_dict = {}

            buckets.append({
                'Account ID': account_id,
                'Bucket Name': bucket['Name'],
                'Bucket Region': region,
                'Resource ID (ARN)': f'arn:aws:s3:::{bucket["Name"]}',
                'Creation Date': bucket['CreationDate'].strftime('%Y-%m-%d'),
                'Tags': tags_dict # Store tags as a dictionary 
            })

        num_regions = len(regions)
        print(f"Number of bucket regions for account {account_id}: {num_regions}")

    except Exception as e:
        print(f"Error listing buckets for account {account_id}: {e}")

    return buckets

def export_details_to_csv(data, filename='bucket_details.csv'):
    """Exports data to a CSV file"""
    if not data:
        print("No resource details found.")
        return

    try:
        with open(filename, 'w', newline='') as csvfile:
            fieldnames = data[0].keys()
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)
        print(f"Data exported to {filename} successfully.")
    except Exception as e:
        print(f"Error exporting data to CSV: {e}")

if __name__ == '__main__':
    all_bucket_details = []
    account_ids = get_account_ids() # Get all account IDs in the organization
    for account_id in account_ids:
        all_bucket_details.extend(get_bucket_details(account_id))

    export_details_to_csv(all_bucket_details)
